/**
 * @file    ds18b20_port.h
 * @brief   Платформозависимая часть библиотеки.
 *
 * Путём реализации интерфейса, объявленного в данном файле можно перенести
 * библиотеку на любую платформу.
 *
 * @note
 * В данном файле можно подключать любые заголовочные файлы, необходимые
 * для реализации объявленного интерфейса.
 */

#ifndef _DS18B20_PORT_H
#define _DS18B20_PORT_H

#include <main.h>
#include <tim.h>

/**
 * @name    Макросы для управления линией 1-Wire.
 * @{
 */
#define _wire_high()    LL_GPIO_SetOutputPin(ONEWIRE_GPIO_Port, ONEWIRE_Pin)
#define _wire_low()     LL_GPIO_ResetOutputPin(ONEWIRE_GPIO_Port, ONEWIRE_Pin)
#define _wire_is_high() LL_GPIO_IsInputPinSet(ONEWIRE_GPIO_Port, ONEWIRE_Pin)
/** @} */

/**
 * По умолчанию ds18b20_read_address() будет работать с основной линией 1-Wire,
 * используемой в библиотеке. В этом нет смысла, если на линии висит более
 * одного датчика, поэтому работу этой функции можно перенаправить на отдельный
 * пин микроконтроллера. Это проще и удобнее, чем выяснять адреса датчиков с
 * помощью алгоритма Search ROM, поскольку последний не устанавливает физическое
 * соответствие между адресами и датчиками, а лишь считывает их. Идея состоит
 * в том, чтобы сначала подключать датчик к отдельной линии для выяснения его
 * адреса, а затем уже к основной линии, к которой подключены остальные датчики.
 *
 * Чтобы использовать отдельную линию 1-Wire для считывания адресов датчиков,
 * оставьте этот макрос, иначе закомментируйте.
 */
//#define USE_ALTWIRE_FOR_ADDRESS_READING

#ifdef USE_ALTWIRE_FOR_ADDRESS_READING
/**
 * @name    Макросы для управления дополнительной линией 1-Wire.
 *
 * Если дополнительная линия 1-Wire не требуется, реализовывать их не надо.
 * @{
 */
#define _alt_wire_high()
#define _alt_wire_low()
#define _alt_wire_is_high()
/** @} */
#endif

/** Функция микросекундной задержки. */
#define _delay_us(us)   delay_us((us))

#endif /* _DS18B20_PORT_H */
